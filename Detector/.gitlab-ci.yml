###############################################################################
# (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration      #
#                                                                             #
# This software is distributed under the terms of the GNU General Public      #
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   #
#                                                                             #
# In applying this licence, CERN does not waive the privileges and immunities #
# granted to it by virtue of its status as an Intergovernmental Organization  #
# or submit itself to any jurisdiction.                                       #
###############################################################################

default:
  tags:
    - cvmfs
  before_script:
    - source /cvmfs/lhcb.cern.ch/lib/LbEnv
    - export CCACHE_DIR=$PWD/.ccache

variables:
  TARGET_BRANCH: master
  CMAKE_GENERATOR: 'Ninja' # default build system
  NO_LBLOGIN: "1" # prevent lbdocker containers to start LbLogin/LbEnv


# Job templates
.build: &template_build
  image: gitlab-registry.cern.ch/lhcb-docker/os-base/alma9-devel:latest
  script:
    - export PATH="/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.20.0/Linux-$(uname -m)/bin:/cvmfs/sft.cern.ch/lcg/contrib/ninja/1.11.1/Linux-$(uname -m)/bin:$PATH"
    - "export LCG_VERSION=$(cut -d: -f2 <<< $CI_JOB_NAME)"
    - "export platform=$(cut -d: -f3 <<< $CI_JOB_NAME)"
    - git clone https://gitlab.cern.ch/lhcb-core/lcg-toolchains.git
    - cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=lcg-toolchains/LCG_${LCG_VERSION}/${platform}.cmake
    - cmake --build build | tee build.log
   # run the tests
    - cd build
    - if ctest -T test -j $(nproc) --no-compress-output ; then result=success ; else result=failure ; fi
    - cp Testing/$(head -1 Testing/TAG)/Test.xml ..
    - cd ..
    - xsltproc ci-utils/CTest2JUnit.xslt Test.xml > results.xml
    - echo "Test results can be browsed at https://lhcb-nightlies.web.cern.ch/utils/test_report?url=${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/Test.xml"
    - test "$result" = "success"
  artifacts:
    paths:
      - build
      - lcg-toolchains
      - build.log
    when: always
    expire_in: 1 day
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .ccache


.warnings-check: &template_warnings_check
  variables:
    LOG: build.log
  script:
    - ci-utils/build-check ${LOG}
  allow_failure: true

### Build
lcg:104:x86_64_v2-el9-gcc13-opt:
  <<: *template_build

lcg:104:x86_64_v2-el9-gcc13-dbg:
  <<: *template_build

lcg:104:x86_64_v2-el9-clang16-opt:
  <<: *template_build

lcg:105:x86_64_v2-el9-gcc13-dbg:
  <<: *template_build

### Check build outputs
warnings-check:lcg:104:x86_64_v2-el9-gcc13-opt:
  <<: *template_warnings_check
  needs:
    - job: "lcg:104:x86_64_v2-el9-gcc13-opt"
      artifacts: true

warnings-check:lcg:104:x86_64_v2-el9-gcc13-dbg:
  <<: *template_warnings_check
  needs:
    - job: "lcg:104:x86_64_v2-el9-gcc13-dbg"
      artifacts: true

warnings-check:lcg:104:x86_64_v2-el9-clang16-opt:
  <<: *template_warnings_check
  needs:
    - job: "lcg:104:x86_64_v2-el9-clang16-opt"
      artifacts: true

warnings-check:lcg:105:x86_64_v2-el9-gcc13-dbg:
  <<: *template_warnings_check
  needs:
    - job: "lcg:105:x86_64_v2-el9-gcc13-dbg"
      artifacts: true

verify_checksums_version:
  image: gitlab-registry.cern.ch/lhcb-docker/os-base/alma9-devel:latest
  needs:
    - job: "lcg:104:x86_64_v2-el9-gcc13-opt"
      artifacts: true
  script:
    - if ! build/bin/run python scripts/verify_checksums.py --check version; then
    -     echo "Please note that checksums for any released version should not be changed!"; exit 1
    - fi
  artifacts:
    when: on_failure
    expire_in: 1 day

verify_checksums_working:
  image: gitlab-registry.cern.ch/lhcb-docker/os-base/alma9-devel:latest
  needs:
    - job: "lcg:104:x86_64_v2-el9-gcc13-opt"
      artifacts: true
  script:
    - if ! build/bin/run python scripts/verify_checksums.py --check working; then
    -     echo "Please do not update the cheksums by yourself. Ping the project maintainers, they will handle checksum updates before merging."; exit 1
    - fi
  allow_failure:
    exit_codes: 1
  artifacts:
    paths:
      - compact/*/*/checksums.new
    when: on_failure
    expire_in: 1 day

verify_materials:
  image: gitlab-registry.cern.ch/lhcb-docker/os-base/alma9-devel:latest
  needs:
    - job: "lcg:104:x86_64_v2-el9-gcc13-opt"
      artifacts: true
  script:
    - build/bin/run python scripts/materials/check_materials.py check compact/run3/trunk > check_materials_report.txt
  artifacts:
    paths:
      - check_materials_report.txt
    when: always
    expire_in: 1 day

check-copyright:
  image: gitlab-registry.cern.ch/ci-tools/ci-worker:cc7
  script:
    - curl -o lb-check-copyright "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/SourceTools.py?inline=false"
    - python lb-check-copyright -x tests/ConditionsIOV -x lhcbproject.yml origin/${TARGET_BRANCH}

include:
  - project: 'lhcb-rta/reference-update-bot'
    file: 'templates/ref-bot-ci-trigger-template.yml'
  - project: 'lhcb-core/dev-tools/ci-utils'
    file: 'gitlab-ci-fragments/pre-commit-checks.yaml'

check-formatting:
  image: gitlab-registry.cern.ch/lhcb-docker/style-checker
  stage: build
  script:
    - if [ ! -e .clang-format ] ; then
    -   curl -o .clang-format "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/data/default.clang-format?inline=false"
    -   echo '.clang-format' >> .gitignore
    -   git add .gitignore
    - fi
    # Workaround for recent change in lb-format until we drop it
    - rm -f .pre-commit-config.yaml
    - curl -o lb-format "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/SourceTools.py?inline=false"
    - python lb-format --format-patch apply-formatting.patch origin/${TARGET_BRANCH}
  artifacts:
    paths:
      - apply-formatting.patch
    when: on_failure
    expire_in: 1 week


update-working-checksum (maintainers only):
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /.*update-working-checksum.*/
      when: manual
  stage: .post
  needs:
    - job: verify_checksums_working
  before_script:
    - . /cvmfs/lhcb.cern.ch/lib/LbEnv.sh
    - git config --global user.email "noreply@cern.ch"
    - git config --global user.name "Gitlab CI"
    - git remote set-url origin https://${UPDATE_TRUNK_CHECKSUM_USERNAME}:${UPDATE_TRUNK_CHECKSUM_TOKEN}@gitlab.cern.ch/lhcb/Detector.git
  script:
    -  for dir in compact/*/{trunk,before-rich1-geom-update-26052022,branch-*}; do if [ -f "$dir/checksums.new" ]; then mv "$dir/checksums.new" "$dir/checksums"; git add "$dir/checksums"; fi; done
    - if ! git diff --cached --quiet; then git commit --no-verify -m "update working checksum"; git push origin HEAD:${CI_COMMIT_REF_NAME}; fi
